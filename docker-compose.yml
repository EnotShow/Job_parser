version: "3.8"
services:
  postgres:
    image: postgres:latest
    volumes:
      - pg_data:/var/lib/postgresql/data/
    expose:
      - 5432
    ports:
      - "5432:5432"
    env_file:
      - .env
    healthcheck:
      test: pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}
      interval: 10s
      timeout: 5s
      retries: 5

  mqbroker:
    image: rabbitmq:management
    container_name: mqbroker
    restart: always
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      timeout: 10s
      retries: 5

  flower:
    image: mher/flower
    command: [ "python", "-m", "flower", "--broker=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}:${RABBITMQ_PORT}//", "flower" ]
    ports:
      - "5555:5555"
    env_file:
      - .env
    depends_on:
      mqbroker:
        condition: service_healthy

  backend:
    container_name: backend
    restart: always
    build:
      context: ././
      dockerfile: Dockerfile
    expose:
      - 8000
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      mqbroker:
        condition: service_healthy
      postgres:
        condition: service_healthy
    command: "sh -c 'alembic upgrade head && uvicorn app:app --host 0.0.0.0 --port 8000 --reload --log-level debug'"

  frontend:
    build:
      context: .
      dockerfile: Dockerfile-react
    expose:
      - 3000
    ports:
      - "3000:3000"
    volumes:
      - ./front:/front  # Mount the front directory for hot-reloading during development
    env_file:
      - front/.env
    depends_on:
      postgres:
        condition: service_healthy
    command: "sh -c 'serve -s build'"

volumes:
  pg_data:
  rabbitmq_data:
