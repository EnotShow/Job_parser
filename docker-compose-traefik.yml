version: "3.8"

services:
  postgres:
    image: postgres:latest
    volumes:
      - pg_data:/var/lib/postgresql/data/
    expose:
      - 5432
    ports:
      - "5432:5432"
    env_file:
      - .env
    healthcheck:
      test: pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis/redis-stack:latest
    container_name: redis
    restart: always
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    env_file:
      - .env
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}", "--loadmodule", "/opt/redis-stack/lib/redisearch.so", "--loadmodule", "/opt/redis-stack/lib/rejson.so" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5

  flower:
    image: mher/flower
    command: ["python", "-m", "flower", "--broker=redis://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/0", "flower"]
    ports:
      - "5555:5555"
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flower.rule=Host(`${FRONTEND_HOST}`)"
      - "traefik.http.routers.flower.entrypoints=websecure"
      - "traefik.http.routers.flower.tls.certresolver=myresolver"
      - "traefik.http.services.flower.loadbalancer.server.port=5555"

  backend:
    container_name: backend
    restart: always
    build:
      context: ././
      dockerfile: Dockerfile
    expose:
      - 8000
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    command: "sh -c 'alembic upgrade head && uvicorn app:app --host 0.0.0.0 --port 8000 --forwarded-allow-ips='*' --proxy-headers --reload --log-level debug'"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${BACKEND_HOST}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  frontend:
    build:
      context: .
      dockerfile: Dockerfile-react
    expose:
      - 3000
    ports:
      - "3000:3000"
    volumes:
      - ./front:/front
    env_file:
      - front/.env
    depends_on:
      postgres:
        condition: service_healthy
    command: "sh -c 'serve -s build'"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${FRONTEND_HOST}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

  traefik:
    image: traefik:v2.4
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./letsencrypt:/letsencrypt"

volumes:
  pg_data:
  redis_data:
